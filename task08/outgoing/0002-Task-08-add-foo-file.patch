From 909576de1e65262757822700834176bd0494a607 Mon Sep 17 00:00:00 2001
From: Juan Antonio <juantaldea@gmail.com>
Date: Mon, 16 Jul 2018 19:01:29 +0200
Subject: [0123456789AB] [PATCH 2/2] Task 08: add foo file

---
 task08.c | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/task08.c b/task08.c
index 448381c..728d001 100644
--- a/task08.c
+++ b/task08.c
@@ -3,6 +3,7 @@
 #include <linux/module.h>
 #include <linux/debugfs.h>
 #include <linux/jiffies.h>
+#include <linux/rwsem.h>
 
 MODULE_LICENSE("GPL v2");
 MODULE_AUTHOR("Juan Antonio Aldea-Armenteros");
@@ -13,6 +14,9 @@ static const size_t EUDYP_ID_LEN = 12;
 
 struct dentry *dir;
 
+struct rw_semaphore rw_sem;
+static char data[PAGE_SIZE];
+
 static ssize_t id_driver_write(struct file *file, const char __user *buf,
 	size_t count, loff_t *ppos);
 
@@ -25,6 +29,18 @@ static const struct file_operations id_driver_fops = {
 	.write	= id_driver_write,
 };
 
+static ssize_t foo_driver_write(struct file *file, const char __user *buf,
+	size_t len, loff_t *ppos);
+
+static ssize_t foo_driver_read(struct file *file, char __user *buf,
+	size_t len, loff_t *ppos);
+
+static const struct file_operations foo_driver_fops = {
+	.owner	= THIS_MODULE,
+	.read	= foo_driver_read,
+	.write	= foo_driver_write,
+};
+
 static ssize_t id_driver_write(struct file *file, const char __user *buf,
 	size_t count, loff_t *ppos)
 {
@@ -68,6 +84,29 @@ static ssize_t id_driver_read(struct file *file, char __user *buf,
 		EUDYP_ID_LEN);
 }
 
+static ssize_t foo_driver_write(struct file *file, const char __user *buf,
+	size_t len, loff_t *ppos)
+{
+	down_write(&rw_sem);
+
+	size_t result = simple_write_to_buffer(data, PAGE_SIZE, ppos, buf, len);
+
+	up_write(&rw_sem);
+	return result;
+}
+
+static ssize_t foo_driver_read(struct file *file, char __user *buf,
+	size_t len, loff_t *ppos)
+{
+	down_read(&rw_sem);
+
+	size_t result = simple_read_from_buffer(buf, len, ppos, data,
+		PAGE_SIZE);
+
+	up_read(&rw_sem);
+	return result;
+}
+
 static int __init init_m(void)
 {
 	dir = debugfs_create_dir("eudyptula", NULL);
@@ -86,6 +125,14 @@ static int __init init_m(void)
 		goto fail;
 	}
 
+	init_rwsem(&rw_sem);
+	
+	if (!debugfs_create_file_size("foo", 0644, dir, data, &foo_driver_fops,
+		PAGE_SIZE)) {
+		pr_alert("debugfs eudyptula task 8: failed to create /sys/kernel/debug/eudyptula/foo\n");
+		goto fail;
+	}
+
 	pr_alert("MODULE LOADED.\n");
 
 	return 0;
-- 
2.17.1

